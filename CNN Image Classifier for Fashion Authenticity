{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7134568,"sourceType":"datasetVersion","datasetId":4116534}],"dockerImageVersionId":23648,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kamaljitgrewal/cnn-image-classifier-for-fashion-authenticity?scriptVersionId=153927483\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Intel Image Classification (CNN - Keras)\n\nHello, I hope you are having a great day.\n\nIn this notebook, I will try the process of implementing CNN with Keras in order to classify images.\n1. Firstly, we'll import usefull packages.\n1. Then, we'll load the data, before visualize and preprocess it.\n1. We'll try a simple CNN model and then we will evaluate its performances.\n1. We will then use pre trained model to address this challenge aswell.","metadata":{}},{"cell_type":"markdown","source":"# Import Packages","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport os\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sn; sn.set(font_scale=1.4)\nfrom sklearn.utils import shuffle           \nimport matplotlib.pyplot as plt             \nimport cv2                                 \nimport tensorflow as tf                \nfrom tqdm import tqdm","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-12-06T22:41:16.064835Z","iopub.execute_input":"2023-12-06T22:41:16.065206Z","iopub.status.idle":"2023-12-06T22:41:16.070897Z","shell.execute_reply.started":"2023-12-06T22:41:16.065147Z","shell.execute_reply":"2023-12-06T22:41:16.069963Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# class_names = ['mountain', 'street', 'glacier', 'buildings', 'sea', 'forest']\n# Group AB's edit: changed the class names\nclass_names = ['authentic', 'counterfeit']\nclass_names_label = {class_name:i for i, class_name in enumerate(class_names)}\n\nnb_classes = len(class_names)\n\nIMAGE_SIZE = (150, 150)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:16.072076Z","iopub.execute_input":"2023-12-06T22:41:16.072313Z","iopub.status.idle":"2023-12-06T22:41:16.083478Z","shell.execute_reply.started":"2023-12-06T22:41:16.072264Z","shell.execute_reply":"2023-12-06T22:41:16.082604Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Loading the Data\nWe have to write a load_data function that load the images and the labels from the folder.","metadata":{}},{"cell_type":"code","source":"def load_data():\n    \"\"\"\n        Load the data:\n            - 14,034 images to train the network.\n            - 3,000 images to evaluate how accurately the network learned to classify images.\n    \"\"\"\n    \n    # Add the dataset we curated\n    datasets = ['/kaggle/input/authentic-and-counterfeit-fashion/Data sources/seg_train/seg_train', '/kaggle/input/authentic-and-counterfeit-fashion/Data sources/seg_test/seg_test']\n    output = []\n    \n    # Iterate through training and test sets\n    for dataset in datasets:\n        \n        images = []\n        labels = []\n        \n        print(\"Loading {}\".format(dataset))\n        \n        # Iterate through each folder corresponding to a category\n        for folder in os.listdir(dataset):\n            label = class_names_label[folder]\n            \n            # Iterate through each image in our folder\n            for file in tqdm(os.listdir(os.path.join(dataset, folder))):\n                \n                # Get the path name of the image\n                img_path = os.path.join(os.path.join(dataset, folder), file)\n                # Open and resize the img\n                image = cv2.imread(img_path)\n                \n                # Group AB's edit: skip over images that weren't loaded in properly\n                if image is None:\n                    continue\n                    \n                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n                image = cv2.resize(image, IMAGE_SIZE) \n                \n                # Append the image and its corresponding label to the output\n                images.append(image)\n                labels.append(label)\n                \n        images = np.array(images, dtype = 'float32')\n        labels = np.array(labels, dtype = 'int32')   \n        \n        output.append((images, labels))\n\n    return output","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:16.08474Z","iopub.execute_input":"2023-12-06T22:41:16.085145Z","iopub.status.idle":"2023-12-06T22:41:16.097531Z","shell.execute_reply.started":"2023-12-06T22:41:16.085003Z","shell.execute_reply":"2023-12-06T22:41:16.09696Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"(train_images, train_labels), (test_images, test_labels) = load_data()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:16.098512Z","iopub.execute_input":"2023-12-06T22:41:16.098717Z","iopub.status.idle":"2023-12-06T22:41:16.822821Z","shell.execute_reply.started":"2023-12-06T22:41:16.098679Z","shell.execute_reply":"2023-12-06T22:41:16.822164Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_images, train_labels = shuffle(train_images, train_labels, random_state=25)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:16.824021Z","iopub.execute_input":"2023-12-06T22:41:16.824271Z","iopub.status.idle":"2023-12-06T22:41:16.831635Z","shell.execute_reply.started":"2023-12-06T22:41:16.824225Z","shell.execute_reply":"2023-12-06T22:41:16.83097Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Let's explore the dataset\nWe can ask ourselves:\n* How many training and testing examples do we have ?\n* What is the size of the images ?\n* What is the proportion of each observed category ?","metadata":{}},{"cell_type":"code","source":"n_train = train_labels.shape[0]\nn_test = test_labels.shape[0]\n\nprint (\"Number of training examples: {}\".format(n_train))\nprint (\"Number of testing examples: {}\".format(n_test))\nprint (\"Each image is of size: {}\".format(IMAGE_SIZE))","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:16.832944Z","iopub.execute_input":"2023-12-06T22:41:16.833464Z","iopub.status.idle":"2023-12-06T22:41:16.841265Z","shell.execute_reply.started":"2023-12-06T22:41:16.833196Z","shell.execute_reply":"2023-12-06T22:41:16.840648Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n_, train_counts = np.unique(train_labels, return_counts=True)\n_, test_counts = np.unique(test_labels, return_counts=True)\npd.DataFrame({'train': train_counts,\n                    'test': test_counts}, \n             index=class_names\n            ).plot.bar()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:16.842417Z","iopub.execute_input":"2023-12-06T22:41:16.842835Z","iopub.status.idle":"2023-12-06T22:41:17.015911Z","shell.execute_reply.started":"2023-12-06T22:41:16.842784Z","shell.execute_reply":"2023-12-06T22:41:17.015168Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#plt.pie(train_counts,\n#        explode=(0, 0, 0, 0, 0, 0) , \n#        labels=class_names,\n#        autopct='%1.1f%%')\n#plt.axis('equal')\n#plt.title('Proportion of each observed category')\n#plt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:17.017363Z","iopub.execute_input":"2023-12-06T22:41:17.017644Z","iopub.status.idle":"2023-12-06T22:41:17.024756Z","shell.execute_reply.started":"2023-12-06T22:41:17.017593Z","shell.execute_reply":"2023-12-06T22:41:17.024058Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Good practice: scale the data","metadata":{}},{"cell_type":"code","source":"train_images = train_images / 255.0 \ntest_images = test_images / 255.0","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:17.026585Z","iopub.execute_input":"2023-12-06T22:41:17.027072Z","iopub.status.idle":"2023-12-06T22:41:17.038336Z","shell.execute_reply.started":"2023-12-06T22:41:17.026831Z","shell.execute_reply":"2023-12-06T22:41:17.037472Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Visualize the data\nWe can display a random image from the training set.","metadata":{}},{"cell_type":"code","source":"def display_random_image(class_names, images, labels):\n    \"\"\"\n        Display a random image from the images array and its correspond label from the labels array.\n    \"\"\"\n    \n    index = np.random.randint(images.shape[0])\n    plt.figure()\n    plt.imshow(images[index])\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.title('Image #{} : '.format(index) + class_names[labels[index]])\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:17.040015Z","iopub.execute_input":"2023-12-06T22:41:17.040554Z","iopub.status.idle":"2023-12-06T22:41:17.047981Z","shell.execute_reply.started":"2023-12-06T22:41:17.040252Z","shell.execute_reply":"2023-12-06T22:41:17.047199Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"display_random_image(class_names, train_images, train_labels)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:17.049972Z","iopub.execute_input":"2023-12-06T22:41:17.050367Z","iopub.status.idle":"2023-12-06T22:41:17.148945Z","shell.execute_reply.started":"2023-12-06T22:41:17.050304Z","shell.execute_reply":"2023-12-06T22:41:17.148063Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can also display the first 25 images from the training set directly with a loop to get a better view","metadata":{}},{"cell_type":"code","source":"def display_examples(class_names, images, labels):\n    \"\"\"\n        Display 25 images from the images array with its corresponding labels\n    \"\"\"\n    \n    fig = plt.figure(figsize=(10,10))\n    fig.suptitle(\"Some examples of images of the dataset\", fontsize=16)\n    for i in range(25):\n        try:\n            plt.subplot(5,5,i+1)\n            plt.xticks([])\n            plt.yticks([])\n            plt.grid(False)\n            plt.imshow(images[i], cmap=plt.cm.binary)\n            plt.xlabel(class_names[labels[i]])\n        except:\n            pass\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:17.150671Z","iopub.execute_input":"2023-12-06T22:41:17.151249Z","iopub.status.idle":"2023-12-06T22:41:17.158492Z","shell.execute_reply.started":"2023-12-06T22:41:17.150937Z","shell.execute_reply":"2023-12-06T22:41:17.157369Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"display_examples(class_names, train_images, train_labels)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:17.160207Z","iopub.execute_input":"2023-12-06T22:41:17.160868Z","iopub.status.idle":"2023-12-06T22:41:18.292976Z","shell.execute_reply.started":"2023-12-06T22:41:17.160523Z","shell.execute_reply":"2023-12-06T22:41:18.292204Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Beginner: Simple Model Creation\n\nSteps are:\n1. Build the model,\n1. Compile the model,\n1. Train / fit the data to the model,\n1. Evaluate the model on the testing set,\n1. Carry out an error analysis of our model.\n\nWe can build an easy model composed of different layers such as:\n* Conv2D: (32 filters of size 3 by 3) The features will be \"extracted\" from the image.\n* MaxPooling2D: The images get half sized.\n* Flatten: Transforms the format of the images from a 2d-array to a 1d-array of 150 150 3 pixel values.\n* Relu  : given a value x, returns max(x, 0).\n* Softmax: 2 neurons, probability that the image belongs to one of the classes.","metadata":{}},{"cell_type":"code","source":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (150, 150, 3)), \n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation=tf.nn.relu),\n    \n    # Group AB's edit: changed from 6 neurons to 2 because we have 2 classes\n    tf.keras.layers.Dense(2, activation=tf.nn.softmax) \n])","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:18.294341Z","iopub.execute_input":"2023-12-06T22:41:18.294672Z","iopub.status.idle":"2023-12-06T22:41:18.393606Z","shell.execute_reply.started":"2023-12-06T22:41:18.294599Z","shell.execute_reply":"2023-12-06T22:41:18.393028Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Then, we can compile it with some parameters such as:\n* **Optimizer**: adam = RMSProp + Momentum.\nWhat is Momentum and RMSProp ?\n* Momentum = takes into account past gradient to have a better update.\n* RMSProp = exponentially weighted average of the squares of past gradients.\n* **Loss function**: we use sparse categorical crossentropy for classification, each images belongs to one class only","metadata":{}},{"cell_type":"code","source":"model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:18.394735Z","iopub.execute_input":"2023-12-06T22:41:18.395017Z","iopub.status.idle":"2023-12-06T22:41:18.511582Z","shell.execute_reply.started":"2023-12-06T22:41:18.394966Z","shell.execute_reply":"2023-12-06T22:41:18.510984Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We fit the model to the data from the training set. The neural network will learn by itself the pattern in order to distinguish each category.","metadata":{}},{"cell_type":"code","source":"history = model.fit(train_images, train_labels, batch_size=128, epochs=20, validation_split = 0.2)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:18.513115Z","iopub.execute_input":"2023-12-06T22:41:18.513419Z","iopub.status.idle":"2023-12-06T22:41:22.767447Z","shell.execute_reply.started":"2023-12-06T22:41:18.513361Z","shell.execute_reply":"2023-12-06T22:41:22.766872Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_accuracy_loss(history):\n    \"\"\"\n        Plot the accuracy and the loss during the training of the nn.\n    \"\"\"\n    fig = plt.figure(figsize=(10,5))\n\n    # Plot accuracy\n    plt.subplot(221)\n    plt.plot(history.history['acc'],'bo--', label = \"acc\")\n    plt.plot(history.history['val_acc'], 'ro--', label = \"val_acc\")\n    plt.title(\"train_acc vs val_acc\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.legend()\n\n    # Plot loss function\n    plt.subplot(222)\n    plt.plot(history.history['loss'],'bo--', label = \"loss\")\n    plt.plot(history.history['val_loss'], 'ro--', label = \"val_loss\")\n    plt.title(\"train_loss vs val_loss\")\n    plt.ylabel(\"loss\")\n    plt.xlabel(\"epochs\")\n\n    plt.legend()\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:22.768588Z","iopub.execute_input":"2023-12-06T22:41:22.768826Z","iopub.status.idle":"2023-12-06T22:41:22.775104Z","shell.execute_reply.started":"2023-12-06T22:41:22.768779Z","shell.execute_reply":"2023-12-06T22:41:22.774334Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_accuracy_loss(history)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:22.776341Z","iopub.execute_input":"2023-12-06T22:41:22.776597Z","iopub.status.idle":"2023-12-06T22:41:23.256174Z","shell.execute_reply.started":"2023-12-06T22:41:22.776543Z","shell.execute_reply":"2023-12-06T22:41:23.255091Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We should evaluate the model performance on test set","metadata":{}},{"cell_type":"code","source":"test_loss = model.evaluate(test_images, test_labels)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:23.258141Z","iopub.execute_input":"2023-12-06T22:41:23.258972Z","iopub.status.idle":"2023-12-06T22:41:23.292662Z","shell.execute_reply.started":"2023-12-06T22:41:23.258878Z","shell.execute_reply":"2023-12-06T22:41:23.291681Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We see that we achieve 0.86 accuracy on the testing test.\n\nLet's see how the classifier is doing on random images.","metadata":{}},{"cell_type":"code","source":"predictions = model.predict(test_images)     # Vector of probabilities\npred_labels = np.argmax(predictions, axis = 1) # We take the highest probability\n\ndisplay_random_image(class_names, test_images, pred_labels)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:23.294467Z","iopub.execute_input":"2023-12-06T22:41:23.29517Z","iopub.status.idle":"2023-12-06T22:41:24.002427Z","shell.execute_reply.started":"2023-12-06T22:41:23.295099Z","shell.execute_reply":"2023-12-06T22:41:24.00165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Error analysis\n\nWe can try to understand on which kind of images the classifier has trouble.","metadata":{}},{"cell_type":"code","source":"def print_mislabeled_images(class_names, test_images, test_labels, pred_labels):\n    \"\"\"\n        Print 25 examples of mislabeled images by the classifier, e.g when test_labels != pred_labels\n    \"\"\"\n    BOO = (test_labels == pred_labels)\n    mislabeled_indices = np.where(BOO == 0)\n    mislabeled_images = test_images[mislabeled_indices]\n    mislabeled_labels = pred_labels[mislabeled_indices]\n\n    title = \"Some examples of mislabeled images by the classifier:\"\n    display_examples(class_names,  mislabeled_images, mislabeled_labels)\n","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:24.00373Z","iopub.execute_input":"2023-12-06T22:41:24.004036Z","iopub.status.idle":"2023-12-06T22:41:24.011575Z","shell.execute_reply.started":"2023-12-06T22:41:24.003984Z","shell.execute_reply":"2023-12-06T22:41:24.01089Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print_mislabeled_images(class_names, test_images, test_labels, pred_labels)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:24.013281Z","iopub.execute_input":"2023-12-06T22:41:24.013885Z","iopub.status.idle":"2023-12-06T22:41:24.839618Z","shell.execute_reply.started":"2023-12-06T22:41:24.013531Z","shell.execute_reply":"2023-12-06T22:41:24.838739Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"CM = confusion_matrix(test_labels, pred_labels)\nax = plt.axes()\nsn.heatmap(CM, annot=True, \n           annot_kws={\"size\": 10}, \n           xticklabels=class_names, \n           yticklabels=class_names, ax = ax)\nax.set_title('Confusion matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:24.840999Z","iopub.execute_input":"2023-12-06T22:41:24.841475Z","iopub.status.idle":"2023-12-06T22:41:25.014328Z","shell.execute_reply.started":"2023-12-06T22:41:24.841418Z","shell.execute_reply":"2023-12-06T22:41:25.013379Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Conclusion: The classifier has trouble with counterfeit images.\nIt's near 50/50 whether a counterfeit product is correctly classified or not.","metadata":{}},{"cell_type":"markdown","source":"**Intermediate Update January 2020**\n\n* Feature extraction with VGG16 trained on ImageNet\n\n\n* Ensemble models of Neural Networks with the features extracted from VGG\n\nInspired from: https://machinelearningmastery.com/model-averaging-ensemble-for-deep-learning-neural-networks/\n\n* Fine Tuning with VGG16 trained on ImageNet","metadata":{}},{"cell_type":"markdown","source":"# Feature extraction with VGG ImageNet","metadata":{}},{"cell_type":"markdown","source":"We can extract features from VGG16.","metadata":{}},{"cell_type":"code","source":"# from keras.applications.vgg16 import VGG16\n# from keras.preprocessing import image\n# from keras.applications.vgg16 import preprocess_input\n\n# model = VGG16(weights='imagenet', include_top=False)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.015885Z","iopub.execute_input":"2023-12-06T22:41:25.016341Z","iopub.status.idle":"2023-12-06T22:41:25.02289Z","shell.execute_reply.started":"2023-12-06T22:41:25.016156Z","shell.execute_reply":"2023-12-06T22:41:25.022054Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Get the features directly from VGG16","metadata":{}},{"cell_type":"code","source":"# train_features = model.predict(train_images)\n# test_features = model.predict(test_images)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.024483Z","iopub.execute_input":"2023-12-06T22:41:25.025064Z","iopub.status.idle":"2023-12-06T22:41:25.030856Z","shell.execute_reply.started":"2023-12-06T22:41:25.025012Z","shell.execute_reply":"2023-12-06T22:41:25.030048Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Visualize the features through PCA","metadata":{}},{"cell_type":"code","source":"#n_train, x, y, z = train_features.shape\n#n_test, x, y, z = test_features.shape\n#numFeatures = x * y * z","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.032426Z","iopub.execute_input":"2023-12-06T22:41:25.033219Z","iopub.status.idle":"2023-12-06T22:41:25.039221Z","shell.execute_reply.started":"2023-12-06T22:41:25.033166Z","shell.execute_reply":"2023-12-06T22:41:25.038511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#from sklearn import decomposition\n\n#pca = decomposition.PCA(n_components = 2)\n\n# X = train_features.reshape((n_train, x*y*z))\n# pca.fit(X)\n\n# C = pca.transform(X) # Représentation des individus dans les nouveaux axe\n# C1 = C[:,0]\n# C2 = C[:,1]","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.040651Z","iopub.execute_input":"2023-12-06T22:41:25.041242Z","iopub.status.idle":"2023-12-06T22:41:25.047348Z","shell.execute_reply.started":"2023-12-06T22:41:25.041191Z","shell.execute_reply":"2023-12-06T22:41:25.04674Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# ### Figures\n\n# plt.subplots(figsize=(10,10))\n\n# for i, class_name in enumerate(class_names):\n#     plt.scatter(C1[train_labels == i][:1000], C2[train_labels == i][:1000], label = class_name, alpha=0.4)\n# plt.legend()\n# plt.title(\"PCA Projection\")\n# plt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.048746Z","iopub.execute_input":"2023-12-06T22:41:25.049356Z","iopub.status.idle":"2023-12-06T22:41:25.055353Z","shell.execute_reply.started":"2023-12-06T22:41:25.049302Z","shell.execute_reply":"2023-12-06T22:41:25.054806Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can identifying clusters thanks to this PCA. The clusters correspond more or less to the labels.\n\nWe see that glacier and mountain points are very close to each other, as VGG sees them as very similar.\n\nWe see that there is no distinction between building and street.\n ","metadata":{}},{"cell_type":"markdown","source":"## Training on top of VGG\n\nLet's train a simple one-layer Neural Network on the features extracted from VGG.","metadata":{}},{"cell_type":"code","source":"# model2 = tf.keras.Sequential([\n#     tf.keras.layers.Flatten(input_shape = (x, y, z)),\n#     tf.keras.layers.Dense(50, activation=tf.nn.relu),\n#     tf.keras.layers.Dense(6, activation=tf.nn.softmax)\n# ])\n\n# model2.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# history2 = model2.fit(train_features, train_labels, batch_size=128, epochs=15, validation_split = 0.2)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.056549Z","iopub.execute_input":"2023-12-06T22:41:25.057223Z","iopub.status.idle":"2023-12-06T22:41:25.063841Z","shell.execute_reply.started":"2023-12-06T22:41:25.057171Z","shell.execute_reply":"2023-12-06T22:41:25.063326Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot_accuracy_loss(history)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.065216Z","iopub.execute_input":"2023-12-06T22:41:25.06583Z","iopub.status.idle":"2023-12-06T22:41:25.075703Z","shell.execute_reply.started":"2023-12-06T22:41:25.06578Z","shell.execute_reply":"2023-12-06T22:41:25.074807Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We should get approximately 0.844 accuracy (+0.1 accuracy) over the simple ConvNet.","metadata":{}},{"cell_type":"code","source":"# test_loss = model2.evaluate(test_features, test_labels)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.077099Z","iopub.execute_input":"2023-12-06T22:41:25.078989Z","iopub.status.idle":"2023-12-06T22:41:25.084387Z","shell.execute_reply.started":"2023-12-06T22:41:25.077342Z","shell.execute_reply":"2023-12-06T22:41:25.083752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Ensemble Neural Networks","metadata":{}},{"cell_type":"code","source":"# np.random.seed(seed=1997)\n# # Number of estimators\n# n_estimators = 10\n# # Proporition of samples to use to train each training\n# max_samples = 0.8\n\n# max_samples *= n_train\n# max_samples = int(max_samples)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.085315Z","iopub.execute_input":"2023-12-06T22:41:25.086062Z","iopub.status.idle":"2023-12-06T22:41:25.092852Z","shell.execute_reply.started":"2023-12-06T22:41:25.08601Z","shell.execute_reply":"2023-12-06T22:41:25.092299Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We define n_estimators Neural Networks. \n\nEach Neural Network will be trained on random subsets of the training dataset. Each subset contains max_samples samples.","metadata":{}},{"cell_type":"code","source":"# models = list()\n# random = np.random.randint(50, 100, size = n_estimators)\n\n# for i in range(n_estimators):\n    \n#     # Model\n#     model = tf.keras.Sequential([ tf.keras.layers.Flatten(input_shape = (x, y, z)),\n#                                 # One layer with random size\n#                                     tf.keras.layers.Dense(random[i], activation=tf.nn.relu),\n#                                     tf.keras.layers.Dense(6, activation=tf.nn.softmax)\n#                                 ])\n    \n#     model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n#     # Store model\n#     models.append(model)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.093795Z","iopub.execute_input":"2023-12-06T22:41:25.096058Z","iopub.status.idle":"2023-12-06T22:41:25.101681Z","shell.execute_reply.started":"2023-12-06T22:41:25.096005Z","shell.execute_reply":"2023-12-06T22:41:25.100906Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# histories = []\n\n# for i in range(n_estimators):\n#     # Train each model on a bag of the training data\n#     train_idx = np.random.choice(len(train_features), size = max_samples)\n#     histories.append(models[i].fit(train_features[train_idx], train_labels[train_idx], batch_size=128, epochs=10, validation_split = 0.1))","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.103239Z","iopub.execute_input":"2023-12-06T22:41:25.104005Z","iopub.status.idle":"2023-12-06T22:41:25.109569Z","shell.execute_reply.started":"2023-12-06T22:41:25.103636Z","shell.execute_reply":"2023-12-06T22:41:25.1089Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We aggregate each model individual predictions to form a final prediction.","metadata":{}},{"cell_type":"code","source":"# predictions = []\n# for i in range(n_estimators):\n#     predictions.append(models[i].predict(test_features))\n    \n# predictions = np.array(predictions)\n# predictions = predictions.sum(axis = 0)\n# pred_labels = predictions.argmax(axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.110638Z","iopub.execute_input":"2023-12-06T22:41:25.111092Z","iopub.status.idle":"2023-12-06T22:41:25.117576Z","shell.execute_reply.started":"2023-12-06T22:41:25.111031Z","shell.execute_reply":"2023-12-06T22:41:25.116963Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We should improve our result as we have a lower variance.","metadata":{}},{"cell_type":"code","source":"# from sklearn.metrics import accuracy_score\n# print(\"Accuracy : {}\".format(accuracy_score(test_labels, pred_labels)))","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.1187Z","iopub.execute_input":"2023-12-06T22:41:25.11923Z","iopub.status.idle":"2023-12-06T22:41:25.12627Z","shell.execute_reply.started":"2023-12-06T22:41:25.119172Z","shell.execute_reply":"2023-12-06T22:41:25.125625Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Fine Tuning VGG ImageNet","metadata":{}},{"cell_type":"code","source":"# from keras.models import Model\n\n# model = VGG16(weights='imagenet', include_top=False)\n# model = Model(inputs=model.inputs, outputs=model.layers[-5].output)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.12873Z","iopub.execute_input":"2023-12-06T22:41:25.129241Z","iopub.status.idle":"2023-12-06T22:41:25.139246Z","shell.execute_reply.started":"2023-12-06T22:41:25.129148Z","shell.execute_reply":"2023-12-06T22:41:25.138273Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# train_features = model.predict(train_images)\n# test_features = model.predict(test_images)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.14038Z","iopub.execute_input":"2023-12-06T22:41:25.140611Z","iopub.status.idle":"2023-12-06T22:41:25.148354Z","shell.execute_reply.started":"2023-12-06T22:41:25.140559Z","shell.execute_reply":"2023-12-06T22:41:25.147618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from keras.layers import Input, Dense, Conv2D, Activation , MaxPooling2D, Flatten\n\n# model2 = VGG16(weights='imagenet', include_top=False)\n\n# input_shape = model2.layers[-4].get_input_shape_at(0) # get the input shape of desired layer\n# layer_input = Input(shape = (9, 9, 512)) # a new input tensor to be able to feed the desired layer\n# # https://stackoverflow.com/questions/52800025/keras-give-input-to-intermediate-layer-and-get-final-output\n\n# x = layer_input\n# for layer in model2.layers[-4::1]:\n#     x = layer(x)\n    \n# x = Conv2D(64, (3, 3), activation='relu')(x)\n# x = MaxPooling2D(pool_size=(2, 2))(x)\n# x = Flatten()(x)\n# x = Dense(100,activation='relu')(x)\n# x = Dense(6,activation='softmax')(x)\n\n# # create the model\n# new_model = Model(layer_input, x)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.149522Z","iopub.execute_input":"2023-12-06T22:41:25.149758Z","iopub.status.idle":"2023-12-06T22:41:25.15775Z","shell.execute_reply.started":"2023-12-06T22:41:25.149719Z","shell.execute_reply":"2023-12-06T22:41:25.156999Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# new_model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.159059Z","iopub.execute_input":"2023-12-06T22:41:25.159319Z","iopub.status.idle":"2023-12-06T22:41:25.167249Z","shell.execute_reply.started":"2023-12-06T22:41:25.159268Z","shell.execute_reply":"2023-12-06T22:41:25.166489Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# new_model.summary()","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.168485Z","iopub.execute_input":"2023-12-06T22:41:25.168778Z","iopub.status.idle":"2023-12-06T22:41:25.176787Z","shell.execute_reply.started":"2023-12-06T22:41:25.16872Z","shell.execute_reply":"2023-12-06T22:41:25.176008Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# history = new_model.fit(train_features, train_labels, batch_size=128, epochs=10, validation_split = 0.2)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.177903Z","iopub.execute_input":"2023-12-06T22:41:25.178211Z","iopub.status.idle":"2023-12-06T22:41:25.18601Z","shell.execute_reply.started":"2023-12-06T22:41:25.178153Z","shell.execute_reply":"2023-12-06T22:41:25.185219Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot_accuracy_loss(history)","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.187065Z","iopub.execute_input":"2023-12-06T22:41:25.18728Z","iopub.status.idle":"2023-12-06T22:41:25.195443Z","shell.execute_reply.started":"2023-12-06T22:41:25.187244Z","shell.execute_reply":"2023-12-06T22:41:25.194611Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# from sklearn.metrics import accuracy_score\n\n# predictions = new_model.predict(test_features)    \n# pred_labels = np.argmax(predictions, axis = 1)\n# print(\"Accuracy : {}\".format(accuracy_score(test_labels, pred_labels)))","metadata":{"execution":{"iopub.status.busy":"2023-12-06T22:41:25.196481Z","iopub.execute_input":"2023-12-06T22:41:25.196711Z","iopub.status.idle":"2023-12-06T22:41:25.205134Z","shell.execute_reply.started":"2023-12-06T22:41:25.196657Z","shell.execute_reply":"2023-12-06T22:41:25.20439Z"},"jupyter":{"source_hidden":true},"trusted":true},"execution_count":null,"outputs":[]}]}